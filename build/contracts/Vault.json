{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_implementation",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "name": "AddedValuesByDelegateCall",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "implementationIsSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_implementation",
          "type": "address"
        }
      ],
      "name": "setImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "testDelegateCallPricePerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "1": "contracts/Vault.sol"
  },
  "ast": {
    "absolutePath": "contracts/Vault.sol",
    "exportedSymbols": {
      "Vault": [
        160
      ]
    },
    "id": 161,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 57,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:23:1"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "Vault",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 160,
        "linearizedBaseContracts": [
          160
        ],
        "name": "Vault",
        "nameLocation": "66:5:1",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "functionSelector": "c45a0155",
            "id": 59,
            "mutability": "mutable",
            "name": "factory",
            "nameLocation": "93:7:1",
            "nodeType": "VariableDeclaration",
            "scope": 160,
            "src": "78:22:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 58,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "78:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "5c60da1b",
            "id": 61,
            "mutability": "mutable",
            "name": "implementation",
            "nameLocation": "121:14:1",
            "nodeType": "VariableDeclaration",
            "scope": 160,
            "src": "106:29:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 60,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "106:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 75,
              "nodeType": "Block",
              "src": "368:79:1",
              "statements": [
                {
                  "expression": {
                    "id": 68,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 66,
                      "name": "implementation",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 61,
                      "src": "378:14:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 67,
                      "name": "_implementation",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 63,
                      "src": "395:15:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "378:32:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 69,
                  "nodeType": "ExpressionStatement",
                  "src": "378:32:1"
                },
                {
                  "expression": {
                    "id": 73,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 70,
                      "name": "factory",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 59,
                      "src": "420:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 71,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "430:3:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 72,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "430:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "420:20:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 74,
                  "nodeType": "ExpressionStatement",
                  "src": "420:20:1"
                }
              ]
            },
            "id": 76,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 64,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 63,
                  "mutability": "mutable",
                  "name": "_implementation",
                  "nameLocation": "344:15:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 76,
                  "src": "336:23:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 62,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "336:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "335:25:1"
            },
            "returnParameters": {
              "id": 65,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "368:0:1"
            },
            "scope": 160,
            "src": "324:123:1",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 87,
              "nodeType": "Block",
              "src": "476:75:1",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 82,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 79,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "494:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 80,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "494:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 81,
                          "name": "factory",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 59,
                          "src": "508:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "494:21:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "6f6e6c79466163746f72792829",
                        "id": 83,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "517:15:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_b0490f9dabe2d681ab47ede58608239c19f794636b88709d7471418db081ef3f",
                          "typeString": "literal_string \"onlyFactory()\""
                        },
                        "value": "onlyFactory()"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_b0490f9dabe2d681ab47ede58608239c19f794636b88709d7471418db081ef3f",
                          "typeString": "literal_string \"onlyFactory()\""
                        }
                      ],
                      "id": 78,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "486:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 84,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "486:47:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 85,
                  "nodeType": "ExpressionStatement",
                  "src": "486:47:1"
                },
                {
                  "id": 86,
                  "nodeType": "PlaceholderStatement",
                  "src": "543:1:1"
                }
              ]
            },
            "id": 88,
            "name": "onlyFactory",
            "nameLocation": "462:11:1",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 77,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "473:2:1"
            },
            "src": "453:98:1",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "anonymous": false,
            "eventSelector": "4c07b1246bd2051a9f99c2bb74ed771ddcdd2fbfb030741c7c61308051a584ef",
            "id": 92,
            "name": "implementationIsSet",
            "nameLocation": "564:19:1",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 91,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 90,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 92,
                  "src": "584:7:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 89,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "584:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "583:9:1"
            },
            "src": "558:35:1"
          },
          {
            "anonymous": false,
            "eventSelector": "c684ea12dba6e6e1178ce8714e05282cc73273b3390041bb5bbe72fa9d5d3a82",
            "id": 98,
            "name": "AddedValuesByDelegateCall",
            "nameLocation": "604:25:1",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 97,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 94,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "vault",
                  "nameLocation": "638:5:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 98,
                  "src": "630:13:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 93,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "630:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 96,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "success",
                  "nameLocation": "650:7:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 98,
                  "src": "645:12:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 95,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "645:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "629:29:1"
            },
            "src": "598:61:1"
          },
          {
            "body": {
              "id": 111,
              "nodeType": "Block",
              "src": "726:100:1",
              "statements": [
                {
                  "expression": {
                    "id": 105,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 103,
                      "name": "implementation",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 61,
                      "src": "736:14:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 104,
                      "name": "_implementation",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 100,
                      "src": "753:15:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "736:32:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 106,
                  "nodeType": "ExpressionStatement",
                  "src": "736:32:1"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 108,
                        "name": "_implementation",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 100,
                        "src": "803:15:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 107,
                      "name": "implementationIsSet",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 92,
                      "src": "783:19:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 109,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "783:36:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 110,
                  "nodeType": "EmitStatement",
                  "src": "778:41:1"
                }
              ]
            },
            "functionSelector": "d784d426",
            "id": 112,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setImplementation",
            "nameLocation": "674:17:1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 101,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 100,
                  "mutability": "mutable",
                  "name": "_implementation",
                  "nameLocation": "700:15:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 112,
                  "src": "692:23:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 99,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "692:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "691:25:1"
            },
            "returnParameters": {
              "id": 102,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "726:0:1"
            },
            "scope": 160,
            "src": "665:161:1",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 119,
              "nodeType": "Block",
              "src": "891:38:1",
              "statements": [
                {
                  "expression": {
                    "id": 117,
                    "name": "implementation",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 61,
                    "src": "908:14:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 116,
                  "id": 118,
                  "nodeType": "Return",
                  "src": "901:21:1"
                }
              ]
            },
            "functionSelector": "aaf10f42",
            "id": 120,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getImplementation",
            "nameLocation": "841:17:1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 113,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "858:2:1"
            },
            "returnParameters": {
              "id": 116,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 115,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 120,
                  "src": "883:7:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 114,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "883:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "882:9:1"
            },
            "scope": 160,
            "src": "832:97:1",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 158,
              "nodeType": "Block",
              "src": "1016:332:1",
              "statements": [
                {
                  "assignments": [
                    128,
                    130
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 128,
                      "mutability": "mutable",
                      "name": "success",
                      "nameLocation": "1032:7:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 158,
                      "src": "1027:12:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 127,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "1027:4:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 130,
                      "mutability": "mutable",
                      "name": "returnedData",
                      "nameLocation": "1054:12:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 158,
                      "src": "1041:25:1",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 129,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "1041:5:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 139,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "676574596561726e50726963655065725368617265286164647265737329",
                            "id": 135,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1131:32:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_45df65349e80cb32ff64c249ef15efdd080709da2be0e69b8b37413ea32f995c",
                              "typeString": "literal_string \"getYearnPricePerShare(address)\""
                            },
                            "value": "getYearnPricePerShare(address)"
                          },
                          {
                            "id": 136,
                            "name": "_vault",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 122,
                            "src": "1165:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_45df65349e80cb32ff64c249ef15efdd080709da2be0e69b8b37413ea32f995c",
                              "typeString": "literal_string \"getYearnPricePerShare(address)\""
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "expression": {
                            "id": 133,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "1107:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 134,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodeWithSignature",
                          "nodeType": "MemberAccess",
                          "src": "1107:23:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function (string memory) pure returns (bytes memory)"
                          }
                        },
                        "id": 137,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1107:65:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "id": 131,
                        "name": "implementation",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 61,
                        "src": "1070:14:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 132,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "delegatecall",
                      "nodeType": "MemberAccess",
                      "src": "1070:27:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                        "typeString": "function (bytes memory) returns (bool,bytes memory)"
                      }
                    },
                    "id": 138,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1070:112:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bool,bytes memory)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1026:156:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 141,
                        "name": "success",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 128,
                        "src": "1200:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "64656c656761746543616c6c206661696c6564",
                        "id": 142,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1209:21:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_af6bfea76039a9127475d477f24bd8b309e88aab9bf09d387ff24d6b795aeb1b",
                          "typeString": "literal_string \"delegateCall failed\""
                        },
                        "value": "delegateCall failed"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_af6bfea76039a9127475d477f24bd8b309e88aab9bf09d387ff24d6b795aeb1b",
                          "typeString": "literal_string \"delegateCall failed\""
                        }
                      ],
                      "id": 140,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1192:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 143,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1192:39:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 144,
                  "nodeType": "ExpressionStatement",
                  "src": "1192:39:1"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 146,
                        "name": "_vault",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 122,
                        "src": "1273:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 147,
                        "name": "success",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 128,
                        "src": "1281:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 145,
                      "name": "AddedValuesByDelegateCall",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 98,
                      "src": "1247:25:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_bool_$returns$__$",
                        "typeString": "function (address,bool)"
                      }
                    },
                    "id": 148,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1247:42:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 149,
                  "nodeType": "EmitStatement",
                  "src": "1242:47:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 152,
                        "name": "returnedData",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 130,
                        "src": "1317:12:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      {
                        "components": [
                          {
                            "id": 154,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "1332:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_uint256_$",
                              "typeString": "type(uint256)"
                            },
                            "typeName": {
                              "id": 153,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "1332:7:1",
                              "typeDescriptions": {}
                            }
                          }
                        ],
                        "id": 155,
                        "isConstant": false,
                        "isInlineArray": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "TupleExpression",
                        "src": "1331:9:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_uint256_$",
                          "typeString": "type(uint256)"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        },
                        {
                          "typeIdentifier": "t_type$_t_uint256_$",
                          "typeString": "type(uint256)"
                        }
                      ],
                      "expression": {
                        "id": 150,
                        "name": "abi",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -1,
                        "src": "1306:3:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_abi",
                          "typeString": "abi"
                        }
                      },
                      "id": 151,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "decode",
                      "nodeType": "MemberAccess",
                      "src": "1306:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
                        "typeString": "function () pure"
                      }
                    },
                    "id": 156,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1306:35:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 126,
                  "id": 157,
                  "nodeType": "Return",
                  "src": "1299:42:1"
                }
              ]
            },
            "functionSelector": "9de0514e",
            "id": 159,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "testDelegateCallPricePerShare",
            "nameLocation": "945:29:1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 123,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 122,
                  "mutability": "mutable",
                  "name": "_vault",
                  "nameLocation": "983:6:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 159,
                  "src": "975:14:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 121,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "975:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "974:16:1"
            },
            "returnParameters": {
              "id": 126,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 125,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 159,
                  "src": "1008:7:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 124,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1008:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1007:9:1"
            },
            "scope": 160,
            "src": "936:412:1",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 161,
        "src": "57:1293:1",
        "usedErrors": []
      }
    ],
    "src": "32:1318:1"
  },
  "bytecode": "608060405234801561001057600080fd5b506040516103d43803806103d483398101604081905261002f9161005d565b600180546001600160a01b039092166001600160a01b0319928316179055600080549091163317905561008d565b60006020828403121561006f57600080fd5b81516001600160a01b038116811461008657600080fd5b9392505050565b6103388061009c6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80635c60da1b1461005c5780639de0514e1461008c578063aaf10f42146100ad578063c45a0155146100be578063d784d426146100d1575b600080fd5b60015461006f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61009f61009a36600461027e565b6100e6565b604051908152602001610083565b6001546001600160a01b031661006f565b60005461006f906001600160a01b031681565b6100e46100df36600461027e565b61022a565b005b6001546040516001600160a01b038381166024830152600092839283929091169060440160408051601f198184030181529181526020820180516001600160e01b0316631177d94d60e21b1790525161013f91906102ae565b600060405180830381855af49150503d806000811461017a576040519150601f19603f3d011682016040523d82523d6000602084013e61017f565b606091505b5091509150816101cb5760405162461bcd60e51b815260206004820152601360248201527219195b1959d85d1950d85b1b0819985a5b1959606a1b604482015260640160405180910390fd5b604080516001600160a01b038616815283151560208201527fc684ea12dba6e6e1178ce8714e05282cc73273b3390041bb5bbe72fa9d5d3a82910160405180910390a18080602001905181019061022291906102e9565b949350505050565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f4c07b1246bd2051a9f99c2bb74ed771ddcdd2fbfb030741c7c61308051a584ef9060200160405180910390a150565b60006020828403121561029057600080fd5b81356001600160a01b03811681146102a757600080fd5b9392505050565b6000825160005b818110156102cf57602081860181015185830152016102b5565b818111156102de576000828501525b509190910192915050565b6000602082840312156102fb57600080fd5b505191905056fea264697066735822122099c9589eda894b5ae2ec4d9ee1267346220ff522d0b6296b7231a9cc448f3eb664736f6c634300080d0033",
  "bytecodeSha1": "c1a415d6e089dfd1a603ce0788eef6547c53a622",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.13+commit.abaa5c0e"
  },
  "contractName": "Vault",
  "coverageMap": {
    "branches": {
      "1": {
        "Vault.testDelegateCallPricePerShare": {
          "6": [
            1200,
            1207,
            true
          ]
        }
      }
    },
    "statements": {
      "1": {
        "Vault.getImplementation": {
          "0": [
            901,
            922
          ]
        },
        "Vault.setImplementation": {
          "4": [
            736,
            768
          ],
          "5": [
            778,
            819
          ]
        },
        "Vault.testDelegateCallPricePerShare": {
          "1": [
            1192,
            1231
          ],
          "2": [
            1242,
            1289
          ],
          "3": [
            1299,
            1341
          ]
        }
      }
    }
  },
  "dependencies": [],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100575760003560e01c80635c60da1b1461005c5780639de0514e1461008c578063aaf10f42146100ad578063c45a0155146100be578063d784d426146100d1575b600080fd5b60015461006f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61009f61009a36600461027e565b6100e6565b604051908152602001610083565b6001546001600160a01b031661006f565b60005461006f906001600160a01b031681565b6100e46100df36600461027e565b61022a565b005b6001546040516001600160a01b038381166024830152600092839283929091169060440160408051601f198184030181529181526020820180516001600160e01b0316631177d94d60e21b1790525161013f91906102ae565b600060405180830381855af49150503d806000811461017a576040519150601f19603f3d011682016040523d82523d6000602084013e61017f565b606091505b5091509150816101cb5760405162461bcd60e51b815260206004820152601360248201527219195b1959d85d1950d85b1b0819985a5b1959606a1b604482015260640160405180910390fd5b604080516001600160a01b038616815283151560208201527fc684ea12dba6e6e1178ce8714e05282cc73273b3390041bb5bbe72fa9d5d3a82910160405180910390a18080602001905181019061022291906102e9565b949350505050565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f4c07b1246bd2051a9f99c2bb74ed771ddcdd2fbfb030741c7c61308051a584ef9060200160405180910390a150565b60006020828403121561029057600080fd5b81356001600160a01b03811681146102a757600080fd5b9392505050565b6000825160005b818110156102cf57602081860181015185830152016102b5565b818111156102de576000828501525b509190910192915050565b6000602082840312156102fb57600080fd5b505191905056fea264697066735822122099c9589eda894b5ae2ec4d9ee1267346220ff522d0b6296b7231a9cc448f3eb664736f6c634300080d0033",
  "deployedSourceMap": "57:1293:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;106:29;;;;;-1:-1:-1;;;;;106:29:1;;;;;;-1:-1:-1;;;;;178:32:2;;;160:51;;148:2;133:18;106:29:1;;;;;;;;936:412;;;;;;:::i;:::-;;:::i;:::-;;;659:25:2;;;647:2;632:18;936:412:1;513:177:2;832:97:1;908:14;;-1:-1:-1;;;;;908:14:1;832:97;;78:22;;;;;-1:-1:-1;;;;;78:22:1;;;665:161;;;;;;:::i;:::-;;:::i;:::-;;936:412;1070:14;;1107:65;;-1:-1:-1;;;;;178:32:2;;;1107:65:1;;;160:51:2;1008:7:1;;;;;;1070:14;;;;133:18:2;;1107:65:1;;;-1:-1:-1;;1107:65:1;;;;;;;;;;;;;;-1:-1:-1;;;;;1107:65:1;-1:-1:-1;;;1107:65:1;;;1070:112;;;1107:65;1070:112;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1026:156;;;;1200:7;1192:39;;;;-1:-1:-1;;;1192:39:1;;1328:2:2;1192:39:1;;;1310:21:2;1367:2;1347:18;;;1340:30;-1:-1:-1;;;1386:18:2;;;1379:49;1445:18;;1192:39:1;;;;;;;;1247:42;;;-1:-1:-1;;;;;1660:32:2;;1642:51;;1736:14;;1729:22;1724:2;1709:18;;1702:50;1247:42:1;;1615:18:2;1247:42:1;;;;;;;1317:12;1306:35;;;;;;;;;;;;:::i;:::-;1299:42;936:412;-1:-1:-1;;;;936:412:1:o;665:161::-;736:14;:32;;-1:-1:-1;;;;;;736:32:1;-1:-1:-1;;;;;736:32:1;;;;;;;;783:36;;160:51:2;;;783:36:1;;148:2:2;133:18;783:36:1;;;;;;;665:161;:::o;222:286:2:-;281:6;334:2;322:9;313:7;309:23;305:32;302:52;;;350:1;347;340:12;302:52;376:23;;-1:-1:-1;;;;;428:31:2;;418:42;;408:70;;474:1;471;464:12;408:70;497:5;222:286;-1:-1:-1;;;222:286:2:o;695:426::-;824:3;862:6;856:13;887:1;897:129;911:6;908:1;905:13;897:129;;;1009:4;993:14;;;989:25;;983:32;970:11;;;963:53;926:12;897:129;;;1044:6;1041:1;1038:13;1035:48;;;1079:1;1070:6;1065:3;1061:16;1054:27;1035:48;-1:-1:-1;1099:16:2;;;;;695:426;-1:-1:-1;;695:426:2:o;1763:184::-;1833:6;1886:2;1874:9;1865:7;1861:23;1857:32;1854:52;;;1902:1;1899;1892:12;1854:52;-1:-1:-1;1925:16:2;;1763:184;-1:-1:-1;1763:184:2:o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    57,
    1350
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x57 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x5C60DA1B EQ PUSH2 0x5C JUMPI DUP1 PUSH4 0x9DE0514E EQ PUSH2 0x8C JUMPI DUP1 PUSH4 0xAAF10F42 EQ PUSH2 0xAD JUMPI DUP1 PUSH4 0xC45A0155 EQ PUSH2 0xBE JUMPI DUP1 PUSH4 0xD784D426 EQ PUSH2 0xD1 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x6F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x9F PUSH2 0x9A CALLDATASIZE PUSH1 0x4 PUSH2 0x27E JUMP JUMPDEST PUSH2 0xE6 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x83 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x6F JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x6F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0xE4 PUSH2 0xDF CALLDATASIZE PUSH1 0x4 PUSH2 0x27E JUMP JUMPDEST PUSH2 0x22A JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x0 SWAP3 DUP4 SWAP3 DUP4 SWAP3 SWAP1 SWAP2 AND SWAP1 PUSH1 0x44 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x1177D94D PUSH1 0xE2 SHL OR SWAP1 MSTORE MLOAD PUSH2 0x13F SWAP2 SWAP1 PUSH2 0x2AE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x17A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x17F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x1CB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x19195B1959D85D1950D85B1B0819985A5B1959 PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP2 MSTORE DUP4 ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0xC684EA12DBA6E6E1178CE8714E05282CC73273B3390041BB5BBE72FA9D5D3A82 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x222 SWAP2 SWAP1 PUSH2 0x2E9 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x4C07B1246BD2051A9F99C2BB74ED771DDCDD2FBFB030741C7C61308051A584EF SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x290 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2CF JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD DUP6 DUP4 ADD MSTORE ADD PUSH2 0x2B5 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x2DE JUMPI PUSH1 0x0 DUP3 DUP6 ADD MSTORE JUMPDEST POP SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP10 0xC9 PC SWAP15 0xDA DUP10 0x4B GAS 0xE2 0xEC 0x4D SWAP15 0xE1 0x26 PUSH20 0x46220FF522D0B6296B7231A9CC448F3EB664736F PUSH13 0x634300080D0033000000000000 ",
  "pcMap": {
    "0": {
      "offset": [
        57,
        1350
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "5": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "CALLVALUE",
      "path": "1"
    },
    "6": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "DUP1",
      "path": "1"
    },
    "7": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "8": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "12": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "DUP1",
      "path": "1"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "REVERT",
      "path": "1"
    },
    "16": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "17": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "POP",
      "path": "1"
    },
    "18": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "21": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "LT",
      "path": "1"
    },
    "22": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x57"
    },
    "25": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "26": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "CALLDATALOAD",
      "path": "1"
    },
    "29": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "SHR",
      "path": "1"
    },
    "32": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "DUP1",
      "path": "1"
    },
    "33": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x5C60DA1B"
    },
    "38": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "EQ",
      "path": "1"
    },
    "39": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x5C"
    },
    "42": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "43": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "DUP1",
      "path": "1"
    },
    "44": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x9DE0514E"
    },
    "49": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "EQ",
      "path": "1"
    },
    "50": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x8C"
    },
    "53": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "54": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "DUP1",
      "path": "1"
    },
    "55": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xAAF10F42"
    },
    "60": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "EQ",
      "path": "1"
    },
    "61": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xAD"
    },
    "64": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "65": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "DUP1",
      "path": "1"
    },
    "66": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xC45A0155"
    },
    "71": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "EQ",
      "path": "1"
    },
    "72": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xBE"
    },
    "75": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "76": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "DUP1",
      "path": "1"
    },
    "77": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xD784D426"
    },
    "82": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "EQ",
      "path": "1"
    },
    "83": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xD1"
    },
    "86": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "87": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "88": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "90": {
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "DUP1",
      "path": "1"
    },
    "91": {
      "first_revert": true,
      "fn": null,
      "offset": [
        57,
        1350
      ],
      "op": "REVERT",
      "path": "1"
    },
    "92": {
      "offset": [
        106,
        135
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "93": {
      "fn": null,
      "offset": [
        106,
        135
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "95": {
      "fn": null,
      "offset": [
        106,
        135
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "96": {
      "fn": null,
      "offset": [
        106,
        135
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x6F"
    },
    "99": {
      "fn": null,
      "offset": [
        106,
        135
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "100": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "102": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "104": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "106": {
      "op": "SHL"
    },
    "107": {
      "op": "SUB"
    },
    "108": {
      "offset": [
        106,
        135
      ],
      "op": "AND",
      "path": "1"
    },
    "109": {
      "fn": null,
      "offset": [
        106,
        135
      ],
      "op": "DUP2",
      "path": "1"
    },
    "110": {
      "fn": null,
      "offset": [
        106,
        135
      ],
      "op": "JUMP",
      "path": "1"
    },
    "111": {
      "fn": null,
      "offset": [
        106,
        135
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "112": {
      "fn": null,
      "offset": [
        106,
        135
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "114": {
      "fn": null,
      "offset": [
        106,
        135
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "115": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "117": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "119": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "121": {
      "op": "SHL"
    },
    "122": {
      "op": "SUB"
    },
    "123": {
      "op": "SWAP1"
    },
    "124": {
      "op": "SWAP2"
    },
    "125": {
      "op": "AND"
    },
    "126": {
      "op": "DUP2"
    },
    "127": {
      "op": "MSTORE"
    },
    "128": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "130": {
      "op": "ADD"
    },
    "131": {
      "offset": [
        106,
        135
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "132": {
      "fn": null,
      "offset": [
        106,
        135
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "134": {
      "fn": null,
      "offset": [
        106,
        135
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "135": {
      "fn": null,
      "offset": [
        106,
        135
      ],
      "op": "DUP1",
      "path": "1"
    },
    "136": {
      "fn": null,
      "offset": [
        106,
        135
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "137": {
      "fn": null,
      "offset": [
        106,
        135
      ],
      "op": "SUB",
      "path": "1"
    },
    "138": {
      "fn": null,
      "offset": [
        106,
        135
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "139": {
      "fn": null,
      "offset": [
        106,
        135
      ],
      "op": "RETURN",
      "path": "1"
    },
    "140": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        936,
        1348
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "141": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        936,
        1348
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x9F"
    },
    "144": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        936,
        1348
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x9A"
    },
    "147": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        936,
        1348
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "148": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        936,
        1348
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "150": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        936,
        1348
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x27E"
    },
    "153": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "jump": "i",
      "offset": [
        936,
        1348
      ],
      "op": "JUMP",
      "path": "1"
    },
    "154": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        936,
        1348
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "155": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        936,
        1348
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xE6"
    },
    "158": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "jump": "i",
      "offset": [
        936,
        1348
      ],
      "op": "JUMP",
      "path": "1"
    },
    "159": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        936,
        1348
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "160": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        936,
        1348
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "162": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        936,
        1348
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "163": {
      "op": "SWAP1"
    },
    "164": {
      "op": "DUP2"
    },
    "165": {
      "op": "MSTORE"
    },
    "166": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "168": {
      "op": "ADD"
    },
    "169": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        936,
        1348
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x83"
    },
    "172": {
      "op": "JUMP"
    },
    "173": {
      "fn": "Vault.getImplementation",
      "offset": [
        832,
        929
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "174": {
      "fn": "Vault.getImplementation",
      "offset": [
        908,
        922
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 0,
      "value": "0x1"
    },
    "176": {
      "fn": "Vault.getImplementation",
      "offset": [
        908,
        922
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "177": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "179": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "181": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "183": {
      "op": "SHL"
    },
    "184": {
      "op": "SUB"
    },
    "185": {
      "fn": "Vault.getImplementation",
      "offset": [
        908,
        922
      ],
      "op": "AND",
      "path": "1"
    },
    "186": {
      "fn": "Vault.getImplementation",
      "offset": [
        832,
        929
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x6F"
    },
    "189": {
      "fn": "Vault.getImplementation",
      "offset": [
        832,
        929
      ],
      "op": "JUMP",
      "path": "1"
    },
    "190": {
      "offset": [
        78,
        100
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "191": {
      "fn": "Vault.getImplementation",
      "offset": [
        78,
        100
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "193": {
      "fn": "Vault.getImplementation",
      "offset": [
        78,
        100
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "194": {
      "fn": "Vault.getImplementation",
      "offset": [
        78,
        100
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x6F"
    },
    "197": {
      "fn": "Vault.getImplementation",
      "offset": [
        78,
        100
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "198": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "200": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "202": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "204": {
      "op": "SHL"
    },
    "205": {
      "op": "SUB"
    },
    "206": {
      "offset": [
        78,
        100
      ],
      "op": "AND",
      "path": "1"
    },
    "207": {
      "fn": "Vault.getImplementation",
      "offset": [
        78,
        100
      ],
      "op": "DUP2",
      "path": "1"
    },
    "208": {
      "fn": "Vault.getImplementation",
      "offset": [
        78,
        100
      ],
      "op": "JUMP",
      "path": "1"
    },
    "209": {
      "fn": "Vault.setImplementation",
      "offset": [
        665,
        826
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "210": {
      "fn": "Vault.setImplementation",
      "offset": [
        665,
        826
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xE4"
    },
    "213": {
      "fn": "Vault.setImplementation",
      "offset": [
        665,
        826
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xDF"
    },
    "216": {
      "fn": "Vault.setImplementation",
      "offset": [
        665,
        826
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "217": {
      "fn": "Vault.setImplementation",
      "offset": [
        665,
        826
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "219": {
      "fn": "Vault.setImplementation",
      "offset": [
        665,
        826
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x27E"
    },
    "222": {
      "fn": "Vault.setImplementation",
      "jump": "i",
      "offset": [
        665,
        826
      ],
      "op": "JUMP",
      "path": "1"
    },
    "223": {
      "fn": "Vault.setImplementation",
      "offset": [
        665,
        826
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "224": {
      "fn": "Vault.setImplementation",
      "offset": [
        665,
        826
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x22A"
    },
    "227": {
      "fn": "Vault.setImplementation",
      "jump": "i",
      "offset": [
        665,
        826
      ],
      "op": "JUMP",
      "path": "1"
    },
    "228": {
      "fn": "Vault.setImplementation",
      "offset": [
        665,
        826
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "229": {
      "fn": "Vault.setImplementation",
      "offset": [
        665,
        826
      ],
      "op": "STOP",
      "path": "1"
    },
    "230": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        936,
        1348
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "231": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1084
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "233": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1084
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "234": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1107,
        1172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "236": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1107,
        1172
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "237": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "239": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "241": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "243": {
      "op": "SHL"
    },
    "244": {
      "op": "SUB"
    },
    "245": {
      "op": "DUP4"
    },
    "246": {
      "op": "DUP2"
    },
    "247": {
      "op": "AND"
    },
    "248": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1107,
        1172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x24"
    },
    "250": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1107,
        1172
      ],
      "op": "DUP4",
      "path": "1"
    },
    "251": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1107,
        1172
      ],
      "op": "ADD",
      "path": "1"
    },
    "252": {
      "op": "MSTORE"
    },
    "253": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1008,
        1015
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "255": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1008,
        1015
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "256": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1008,
        1015
      ],
      "op": "DUP4",
      "path": "1"
    },
    "257": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1008,
        1015
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "258": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1008,
        1015
      ],
      "op": "DUP4",
      "path": "1"
    },
    "259": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1008,
        1015
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "260": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1084
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "261": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1084
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "262": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1084
      ],
      "op": "AND",
      "path": "1"
    },
    "263": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1084
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "264": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "266": {
      "op": "ADD"
    },
    "267": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1107,
        1172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "269": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1107,
        1172
      ],
      "op": "DUP1",
      "path": "1"
    },
    "270": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1107,
        1172
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "271": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "273": {
      "op": "NOT"
    },
    "274": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1107,
        1172
      ],
      "op": "DUP2",
      "path": "1"
    },
    "275": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1107,
        1172
      ],
      "op": "DUP5",
      "path": "1"
    },
    "276": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1107,
        1172
      ],
      "op": "SUB",
      "path": "1"
    },
    "277": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1107,
        1172
      ],
      "op": "ADD",
      "path": "1"
    },
    "278": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1107,
        1172
      ],
      "op": "DUP2",
      "path": "1"
    },
    "279": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1107,
        1172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "280": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1107,
        1172
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "281": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1107,
        1172
      ],
      "op": "DUP2",
      "path": "1"
    },
    "282": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1107,
        1172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "283": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1107,
        1172
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "285": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1107,
        1172
      ],
      "op": "DUP3",
      "path": "1"
    },
    "286": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1107,
        1172
      ],
      "op": "ADD",
      "path": "1"
    },
    "287": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1107,
        1172
      ],
      "op": "DUP1",
      "path": "1"
    },
    "288": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1107,
        1172
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "289": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "291": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "293": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "295": {
      "op": "SHL"
    },
    "296": {
      "op": "SUB"
    },
    "297": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1107,
        1172
      ],
      "op": "AND",
      "path": "1"
    },
    "298": {
      "op": "PUSH4",
      "value": "0x1177D94D"
    },
    "303": {
      "op": "PUSH1",
      "value": "0xE2"
    },
    "305": {
      "op": "SHL"
    },
    "306": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1107,
        1172
      ],
      "op": "OR",
      "path": "1"
    },
    "307": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1107,
        1172
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "308": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1107,
        1172
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "309": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "310": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x13F"
    },
    "313": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "314": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1107,
        1172
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "315": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2AE"
    },
    "318": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "jump": "i",
      "offset": [
        1070,
        1182
      ],
      "op": "JUMP",
      "path": "1"
    },
    "319": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "320": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "322": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "324": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "325": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "DUP1",
      "path": "1"
    },
    "326": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "DUP4",
      "path": "1"
    },
    "327": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "SUB",
      "path": "1"
    },
    "328": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "DUP2",
      "path": "1"
    },
    "329": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "DUP6",
      "path": "1"
    },
    "330": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "GAS",
      "path": "1"
    },
    "331": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "DELEGATECALL",
      "path": "1"
    },
    "332": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "333": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "POP",
      "path": "1"
    },
    "334": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "POP",
      "path": "1"
    },
    "335": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "336": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "DUP1",
      "path": "1"
    },
    "337": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "339": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "DUP2",
      "path": "1"
    },
    "340": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "EQ",
      "path": "1"
    },
    "341": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x17A"
    },
    "344": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "345": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "347": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "348": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "349": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "POP",
      "path": "1"
    },
    "350": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "352": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "NOT",
      "path": "1"
    },
    "353": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x3F"
    },
    "355": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "356": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "ADD",
      "path": "1"
    },
    "357": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "AND",
      "path": "1"
    },
    "358": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "DUP3",
      "path": "1"
    },
    "359": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "ADD",
      "path": "1"
    },
    "360": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "362": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "363": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "364": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "DUP3",
      "path": "1"
    },
    "365": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "366": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "367": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "369": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "371": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "DUP5",
      "path": "1"
    },
    "372": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "ADD",
      "path": "1"
    },
    "373": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "RETURNDATACOPY",
      "path": "1"
    },
    "374": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x17F"
    },
    "377": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "JUMP",
      "path": "1"
    },
    "378": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "379": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x60"
    },
    "381": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "382": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "POP",
      "path": "1"
    },
    "383": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "384": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1070,
        1182
      ],
      "op": "POP",
      "path": "1"
    },
    "385": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1026,
        1182
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "386": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1026,
        1182
      ],
      "op": "POP",
      "path": "1"
    },
    "387": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1026,
        1182
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "388": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1026,
        1182
      ],
      "op": "POP",
      "path": "1"
    },
    "389": {
      "branch": 6,
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1200,
        1207
      ],
      "op": "DUP2",
      "path": "1",
      "statement": 1
    },
    "390": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1192,
        1231
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1CB"
    },
    "393": {
      "branch": 6,
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1192,
        1231
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "394": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1192,
        1231
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "396": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1192,
        1231
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "397": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "401": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "403": {
      "op": "SHL"
    },
    "404": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1192,
        1231
      ],
      "op": "DUP2",
      "path": "1"
    },
    "405": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1192,
        1231
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "406": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "408": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1192,
        1231
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "410": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1192,
        1231
      ],
      "op": "DUP3",
      "path": "1"
    },
    "411": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1192,
        1231
      ],
      "op": "ADD",
      "path": "1"
    },
    "412": {
      "op": "MSTORE"
    },
    "413": {
      "op": "PUSH1",
      "value": "0x13"
    },
    "415": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "417": {
      "op": "DUP3"
    },
    "418": {
      "op": "ADD"
    },
    "419": {
      "op": "MSTORE"
    },
    "420": {
      "op": "PUSH19",
      "value": "0x19195B1959D85D1950D85B1B0819985A5B1959"
    },
    "440": {
      "op": "PUSH1",
      "value": "0x6A"
    },
    "442": {
      "op": "SHL"
    },
    "443": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "445": {
      "op": "DUP3"
    },
    "446": {
      "op": "ADD"
    },
    "447": {
      "op": "MSTORE"
    },
    "448": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "450": {
      "op": "ADD"
    },
    "451": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1192,
        1231
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "453": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1192,
        1231
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "454": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1192,
        1231
      ],
      "op": "DUP1",
      "path": "1"
    },
    "455": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1192,
        1231
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "456": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1192,
        1231
      ],
      "op": "SUB",
      "path": "1"
    },
    "457": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1192,
        1231
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "458": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1192,
        1231
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "1"
    },
    "459": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1192,
        1231
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "460": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1247,
        1289
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 2,
      "value": "0x40"
    },
    "462": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1247,
        1289
      ],
      "op": "DUP1",
      "path": "1"
    },
    "463": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1247,
        1289
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "464": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "466": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "468": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "470": {
      "op": "SHL"
    },
    "471": {
      "op": "SUB"
    },
    "472": {
      "op": "DUP7"
    },
    "473": {
      "op": "AND"
    },
    "474": {
      "op": "DUP2"
    },
    "475": {
      "op": "MSTORE"
    },
    "476": {
      "op": "DUP4"
    },
    "477": {
      "op": "ISZERO"
    },
    "478": {
      "op": "ISZERO"
    },
    "479": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "481": {
      "op": "DUP3"
    },
    "482": {
      "op": "ADD"
    },
    "483": {
      "op": "MSTORE"
    },
    "484": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1247,
        1289
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0xC684EA12DBA6E6E1178CE8714E05282CC73273B3390041BB5BBE72FA9D5D3A82"
    },
    "517": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1247,
        1289
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "518": {
      "op": "ADD"
    },
    "519": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1247,
        1289
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "521": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1247,
        1289
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "522": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1247,
        1289
      ],
      "op": "DUP1",
      "path": "1"
    },
    "523": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1247,
        1289
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "524": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1247,
        1289
      ],
      "op": "SUB",
      "path": "1"
    },
    "525": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1247,
        1289
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "526": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1247,
        1289
      ],
      "op": "LOG1",
      "path": "1"
    },
    "527": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1317,
        1329
      ],
      "op": "DUP1",
      "path": "1",
      "statement": 3
    },
    "528": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1306,
        1341
      ],
      "op": "DUP1",
      "path": "1"
    },
    "529": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1306,
        1341
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "531": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1306,
        1341
      ],
      "op": "ADD",
      "path": "1"
    },
    "532": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1306,
        1341
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "533": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1306,
        1341
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "534": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1306,
        1341
      ],
      "op": "DUP2",
      "path": "1"
    },
    "535": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1306,
        1341
      ],
      "op": "ADD",
      "path": "1"
    },
    "536": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1306,
        1341
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "537": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1306,
        1341
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x222"
    },
    "540": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1306,
        1341
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "541": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1306,
        1341
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "542": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1306,
        1341
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2E9"
    },
    "545": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "jump": "i",
      "offset": [
        1306,
        1341
      ],
      "op": "JUMP",
      "path": "1"
    },
    "546": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1306,
        1341
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "547": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1299,
        1341
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "548": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        936,
        1348
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "549": {
      "op": "POP"
    },
    "550": {
      "op": "POP"
    },
    "551": {
      "op": "POP"
    },
    "552": {
      "op": "POP"
    },
    "553": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "jump": "o",
      "offset": [
        936,
        1348
      ],
      "op": "JUMP",
      "path": "1"
    },
    "554": {
      "fn": "Vault.setImplementation",
      "offset": [
        665,
        826
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "555": {
      "fn": "Vault.setImplementation",
      "offset": [
        736,
        750
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 4,
      "value": "0x1"
    },
    "557": {
      "fn": "Vault.setImplementation",
      "offset": [
        736,
        768
      ],
      "op": "DUP1",
      "path": "1"
    },
    "558": {
      "fn": "Vault.setImplementation",
      "offset": [
        736,
        768
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "559": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "561": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "563": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "565": {
      "op": "SHL"
    },
    "566": {
      "op": "SUB"
    },
    "567": {
      "op": "NOT"
    },
    "568": {
      "fn": "Vault.setImplementation",
      "offset": [
        736,
        768
      ],
      "op": "AND",
      "path": "1"
    },
    "569": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "571": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "573": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "575": {
      "op": "SHL"
    },
    "576": {
      "op": "SUB"
    },
    "577": {
      "fn": "Vault.setImplementation",
      "offset": [
        736,
        768
      ],
      "op": "DUP4",
      "path": "1"
    },
    "578": {
      "fn": "Vault.setImplementation",
      "offset": [
        736,
        768
      ],
      "op": "AND",
      "path": "1"
    },
    "579": {
      "fn": "Vault.setImplementation",
      "offset": [
        736,
        768
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "580": {
      "fn": "Vault.setImplementation",
      "offset": [
        736,
        768
      ],
      "op": "DUP2",
      "path": "1"
    },
    "581": {
      "fn": "Vault.setImplementation",
      "offset": [
        736,
        768
      ],
      "op": "OR",
      "path": "1"
    },
    "582": {
      "fn": "Vault.setImplementation",
      "offset": [
        736,
        768
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "583": {
      "fn": "Vault.setImplementation",
      "offset": [
        736,
        768
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "584": {
      "fn": "Vault.setImplementation",
      "offset": [
        736,
        768
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "585": {
      "fn": "Vault.setImplementation",
      "offset": [
        783,
        819
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 5,
      "value": "0x40"
    },
    "587": {
      "fn": "Vault.setImplementation",
      "offset": [
        783,
        819
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "588": {
      "op": "SWAP1"
    },
    "589": {
      "op": "DUP2"
    },
    "590": {
      "op": "MSTORE"
    },
    "591": {
      "fn": "Vault.setImplementation",
      "offset": [
        783,
        819
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0x4C07B1246BD2051A9F99C2BB74ED771DDCDD2FBFB030741C7C61308051A584EF"
    },
    "624": {
      "fn": "Vault.setImplementation",
      "offset": [
        783,
        819
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "625": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "627": {
      "op": "ADD"
    },
    "628": {
      "fn": "Vault.setImplementation",
      "offset": [
        783,
        819
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "630": {
      "fn": "Vault.setImplementation",
      "offset": [
        783,
        819
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "631": {
      "fn": "Vault.setImplementation",
      "offset": [
        783,
        819
      ],
      "op": "DUP1",
      "path": "1"
    },
    "632": {
      "fn": "Vault.setImplementation",
      "offset": [
        783,
        819
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "633": {
      "fn": "Vault.setImplementation",
      "offset": [
        783,
        819
      ],
      "op": "SUB",
      "path": "1"
    },
    "634": {
      "fn": "Vault.setImplementation",
      "offset": [
        783,
        819
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "635": {
      "fn": "Vault.setImplementation",
      "offset": [
        783,
        819
      ],
      "op": "LOG1",
      "path": "1"
    },
    "636": {
      "fn": "Vault.setImplementation",
      "offset": [
        665,
        826
      ],
      "op": "POP",
      "path": "1"
    },
    "637": {
      "fn": "Vault.setImplementation",
      "jump": "o",
      "offset": [
        665,
        826
      ],
      "op": "JUMP",
      "path": "1"
    },
    "638": {
      "op": "JUMPDEST"
    },
    "639": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "641": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "643": {
      "op": "DUP3"
    },
    "644": {
      "op": "DUP5"
    },
    "645": {
      "op": "SUB"
    },
    "646": {
      "op": "SLT"
    },
    "647": {
      "op": "ISZERO"
    },
    "648": {
      "op": "PUSH2",
      "value": "0x290"
    },
    "651": {
      "op": "JUMPI"
    },
    "652": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "654": {
      "op": "DUP1"
    },
    "655": {
      "op": "REVERT"
    },
    "656": {
      "op": "JUMPDEST"
    },
    "657": {
      "op": "DUP2"
    },
    "658": {
      "op": "CALLDATALOAD"
    },
    "659": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "661": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "663": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "665": {
      "op": "SHL"
    },
    "666": {
      "op": "SUB"
    },
    "667": {
      "op": "DUP2"
    },
    "668": {
      "op": "AND"
    },
    "669": {
      "op": "DUP2"
    },
    "670": {
      "op": "EQ"
    },
    "671": {
      "op": "PUSH2",
      "value": "0x2A7"
    },
    "674": {
      "op": "JUMPI"
    },
    "675": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "677": {
      "op": "DUP1"
    },
    "678": {
      "op": "REVERT"
    },
    "679": {
      "op": "JUMPDEST"
    },
    "680": {
      "op": "SWAP4"
    },
    "681": {
      "op": "SWAP3"
    },
    "682": {
      "op": "POP"
    },
    "683": {
      "op": "POP"
    },
    "684": {
      "op": "POP"
    },
    "685": {
      "jump": "o",
      "op": "JUMP"
    },
    "686": {
      "op": "JUMPDEST"
    },
    "687": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "689": {
      "op": "DUP3"
    },
    "690": {
      "op": "MLOAD"
    },
    "691": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "693": {
      "op": "JUMPDEST"
    },
    "694": {
      "op": "DUP2"
    },
    "695": {
      "op": "DUP2"
    },
    "696": {
      "op": "LT"
    },
    "697": {
      "op": "ISZERO"
    },
    "698": {
      "op": "PUSH2",
      "value": "0x2CF"
    },
    "701": {
      "op": "JUMPI"
    },
    "702": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "704": {
      "op": "DUP2"
    },
    "705": {
      "op": "DUP7"
    },
    "706": {
      "op": "ADD"
    },
    "707": {
      "op": "DUP2"
    },
    "708": {
      "op": "ADD"
    },
    "709": {
      "op": "MLOAD"
    },
    "710": {
      "op": "DUP6"
    },
    "711": {
      "op": "DUP4"
    },
    "712": {
      "op": "ADD"
    },
    "713": {
      "op": "MSTORE"
    },
    "714": {
      "op": "ADD"
    },
    "715": {
      "op": "PUSH2",
      "value": "0x2B5"
    },
    "718": {
      "op": "JUMP"
    },
    "719": {
      "op": "JUMPDEST"
    },
    "720": {
      "op": "DUP2"
    },
    "721": {
      "op": "DUP2"
    },
    "722": {
      "op": "GT"
    },
    "723": {
      "op": "ISZERO"
    },
    "724": {
      "op": "PUSH2",
      "value": "0x2DE"
    },
    "727": {
      "op": "JUMPI"
    },
    "728": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "730": {
      "op": "DUP3"
    },
    "731": {
      "op": "DUP6"
    },
    "732": {
      "op": "ADD"
    },
    "733": {
      "op": "MSTORE"
    },
    "734": {
      "op": "JUMPDEST"
    },
    "735": {
      "op": "POP"
    },
    "736": {
      "op": "SWAP2"
    },
    "737": {
      "op": "SWAP1"
    },
    "738": {
      "op": "SWAP2"
    },
    "739": {
      "op": "ADD"
    },
    "740": {
      "op": "SWAP3"
    },
    "741": {
      "op": "SWAP2"
    },
    "742": {
      "op": "POP"
    },
    "743": {
      "op": "POP"
    },
    "744": {
      "jump": "o",
      "op": "JUMP"
    },
    "745": {
      "op": "JUMPDEST"
    },
    "746": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "748": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "750": {
      "op": "DUP3"
    },
    "751": {
      "op": "DUP5"
    },
    "752": {
      "op": "SUB"
    },
    "753": {
      "op": "SLT"
    },
    "754": {
      "op": "ISZERO"
    },
    "755": {
      "op": "PUSH2",
      "value": "0x2FB"
    },
    "758": {
      "op": "JUMPI"
    },
    "759": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "761": {
      "op": "DUP1"
    },
    "762": {
      "op": "REVERT"
    },
    "763": {
      "op": "JUMPDEST"
    },
    "764": {
      "op": "POP"
    },
    "765": {
      "op": "MLOAD"
    },
    "766": {
      "op": "SWAP2"
    },
    "767": {
      "op": "SWAP1"
    },
    "768": {
      "op": "POP"
    },
    "769": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "1afa2aeac3c6e400067b95034d529a5b54758728",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract Vault {\n    address public factory;\n    address public implementation;\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(address _implementation) public {\n        implementation = _implementation;\n        factory = msg.sender;\n    }\n\n    modifier onlyFactory() {\n        require(msg.sender == factory, \"onlyFactory()\");\n        _;\n    }\n\n\n    event implementationIsSet(address);\n    event AddedValuesByDelegateCall(address vault, bool success);\n\n    function setImplementation(address _implementation) external {\n        implementation = _implementation;\n        emit implementationIsSet(_implementation);\n    }\n\n    function getImplementation() external view returns(address){\n        return implementation;\n    }\n\n\n    function testDelegateCallPricePerShare(address _vault) external returns(uint256){\n        (bool success, bytes memory returnedData) = implementation.delegatecall(\n        abi.encodeWithSignature(\"getYearnPricePerShare(address)\", _vault)\n        );\n        require(success, \"delegateCall failed\");\n\n        emit AddedValuesByDelegateCall(_vault, success);\n        return abi.decode(returnedData, (uint256));\n    }\n}",
  "sourceMap": "57:1293:1:-:0;;;324:123;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;378:14;:32;;-1:-1:-1;;;;;378:32:1;;;-1:-1:-1;;;;;;378:32:1;;;;;;:14;420:20;;;;;430:10;420:20;;;57:1293;;14:290:2;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:2;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:2:o;:::-;57:1293:1;;;;;;",
  "sourcePath": "contracts/Vault.sol",
  "type": "contract"
}