{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "name": "AddedValuesByDelegateCall",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "test",
          "type": "uint256"
        }
      ],
      "name": "Test",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "implementationIsSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_implementation",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "testDelegateCallPricePerShare",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "1": "contracts/Vault.sol"
  },
  "ast": {
    "absolutePath": "contracts/Vault.sol",
    "exportedSymbols": {
      "Vault": [
        162
      ]
    },
    "id": 163,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 62,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:23:1"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "Vault",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 162,
        "linearizedBaseContracts": [
          162
        ],
        "name": "Vault",
        "nameLocation": "66:5:1",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "functionSelector": "c45a0155",
            "id": 64,
            "mutability": "mutable",
            "name": "factory",
            "nameLocation": "283:7:1",
            "nodeType": "VariableDeclaration",
            "scope": 162,
            "src": "268:22:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 63,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "268:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "5c60da1b",
            "id": 66,
            "mutability": "mutable",
            "name": "implementation",
            "nameLocation": "311:14:1",
            "nodeType": "VariableDeclaration",
            "scope": 162,
            "src": "296:29:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 65,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "296:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 68,
            "mutability": "mutable",
            "name": "isInited",
            "nameLocation": "344:8:1",
            "nodeType": "VariableDeclaration",
            "scope": 162,
            "src": "331:21:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 67,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "331:4:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "private"
          },
          {
            "anonymous": false,
            "eventSelector": "4c07b1246bd2051a9f99c2bb74ed771ddcdd2fbfb030741c7c61308051a584ef",
            "id": 72,
            "name": "implementationIsSet",
            "nameLocation": "365:19:1",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 71,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 70,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 72,
                  "src": "385:7:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 69,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "385:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "384:9:1"
            },
            "src": "359:35:1"
          },
          {
            "anonymous": false,
            "eventSelector": "c684ea12dba6e6e1178ce8714e05282cc73273b3390041bb5bbe72fa9d5d3a82",
            "id": 78,
            "name": "AddedValuesByDelegateCall",
            "nameLocation": "405:25:1",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 77,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 74,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "vault",
                  "nameLocation": "439:5:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 78,
                  "src": "431:13:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 73,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "431:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 76,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "success",
                  "nameLocation": "451:7:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 78,
                  "src": "446:12:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 75,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "446:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "430:29:1"
            },
            "src": "399:61:1"
          },
          {
            "anonymous": false,
            "eventSelector": "63a242a632efe33c0e210e04e4173612a17efa4f16aa4890bc7e46caece80de0",
            "id": 82,
            "name": "Test",
            "nameLocation": "471:4:1",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 81,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 80,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "test",
                  "nameLocation": "484:4:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 82,
                  "src": "476:12:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 79,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "476:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "475:14:1"
            },
            "src": "465:25:1"
          },
          {
            "body": {
              "id": 93,
              "nodeType": "Block",
              "src": "701:75:1",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 88,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 85,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "719:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 86,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "719:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 87,
                          "name": "factory",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 64,
                          "src": "733:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "719:21:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "6f6e6c79466163746f72792829",
                        "id": 89,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "742:15:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_b0490f9dabe2d681ab47ede58608239c19f794636b88709d7471418db081ef3f",
                          "typeString": "literal_string \"onlyFactory()\""
                        },
                        "value": "onlyFactory()"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_b0490f9dabe2d681ab47ede58608239c19f794636b88709d7471418db081ef3f",
                          "typeString": "literal_string \"onlyFactory()\""
                        }
                      ],
                      "id": 84,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "711:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 90,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "711:47:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 91,
                  "nodeType": "ExpressionStatement",
                  "src": "711:47:1"
                },
                {
                  "id": 92,
                  "nodeType": "PlaceholderStatement",
                  "src": "768:1:1"
                }
              ]
            },
            "id": 94,
            "name": "onlyFactory",
            "nameLocation": "687:11:1",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 83,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "698:2:1"
            },
            "src": "678:98:1",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 118,
              "nodeType": "Block",
              "src": "1005:149:1",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 101,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "1023:9:1",
                        "subExpression": {
                          "id": 100,
                          "name": "isInited",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 68,
                          "src": "1024:8:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "6e6f207365636f6e6420696e6974",
                        "id": 102,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1033:16:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_4da1ac2c60c109ece0df1836edb3633bcf33e5df338d989eaebf55d8331e54c4",
                          "typeString": "literal_string \"no second init\""
                        },
                        "value": "no second init"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_4da1ac2c60c109ece0df1836edb3633bcf33e5df338d989eaebf55d8331e54c4",
                          "typeString": "literal_string \"no second init\""
                        }
                      ],
                      "id": 99,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1015:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 103,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1015:35:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 104,
                  "nodeType": "ExpressionStatement",
                  "src": "1015:35:1"
                },
                {
                  "expression": {
                    "id": 108,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 105,
                      "name": "factory",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 64,
                      "src": "1060:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 106,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "1070:3:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 107,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "1070:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "1060:20:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 109,
                  "nodeType": "ExpressionStatement",
                  "src": "1060:20:1"
                },
                {
                  "expression": {
                    "id": 112,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 110,
                      "name": "implementation",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 66,
                      "src": "1090:14:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 111,
                      "name": "_implementation",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 96,
                      "src": "1107:15:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "1090:32:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 113,
                  "nodeType": "ExpressionStatement",
                  "src": "1090:32:1"
                },
                {
                  "expression": {
                    "id": 116,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 114,
                      "name": "isInited",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 68,
                      "src": "1132:8:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 115,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1143:4:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "1132:15:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 117,
                  "nodeType": "ExpressionStatement",
                  "src": "1132:15:1"
                }
              ]
            },
            "functionSelector": "19ab453c",
            "id": 119,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "init",
            "nameLocation": "966:4:1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 97,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 96,
                  "mutability": "mutable",
                  "name": "_implementation",
                  "nameLocation": "979:15:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 119,
                  "src": "971:23:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 95,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "971:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "970:25:1"
            },
            "returnParameters": {
              "id": 98,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1005:0:1"
            },
            "scope": 162,
            "src": "957:197:1",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 126,
              "nodeType": "Block",
              "src": "1399:38:1",
              "statements": [
                {
                  "expression": {
                    "id": 124,
                    "name": "implementation",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 66,
                    "src": "1416:14:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 123,
                  "id": 125,
                  "nodeType": "Return",
                  "src": "1409:21:1"
                }
              ]
            },
            "functionSelector": "aaf10f42",
            "id": 127,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getImplementation",
            "nameLocation": "1349:17:1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 120,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1366:2:1"
            },
            "returnParameters": {
              "id": 123,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 122,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 127,
                  "src": "1391:7:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 121,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1391:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1390:9:1"
            },
            "scope": 162,
            "src": "1340:97:1",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 160,
              "nodeType": "Block",
              "src": "1693:278:1",
              "statements": [
                {
                  "assignments": [
                    133,
                    135
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 133,
                      "mutability": "mutable",
                      "name": "success",
                      "nameLocation": "1709:7:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 160,
                      "src": "1704:12:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 132,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "1704:4:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 135,
                      "mutability": "mutable",
                      "name": "returnedData",
                      "nameLocation": "1731:12:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 160,
                      "src": "1718:25:1",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 134,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "1718:5:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 144,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "676574596561726e50726963655065725368617265286164647265737329",
                            "id": 140,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1808:32:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_45df65349e80cb32ff64c249ef15efdd080709da2be0e69b8b37413ea32f995c",
                              "typeString": "literal_string \"getYearnPricePerShare(address)\""
                            },
                            "value": "getYearnPricePerShare(address)"
                          },
                          {
                            "id": 141,
                            "name": "_vault",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 129,
                            "src": "1842:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_45df65349e80cb32ff64c249ef15efdd080709da2be0e69b8b37413ea32f995c",
                              "typeString": "literal_string \"getYearnPricePerShare(address)\""
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "expression": {
                            "id": 138,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "1784:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 139,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodeWithSignature",
                          "nodeType": "MemberAccess",
                          "src": "1784:23:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function (string memory) pure returns (bytes memory)"
                          }
                        },
                        "id": 142,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1784:65:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "id": 136,
                        "name": "implementation",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 66,
                        "src": "1747:14:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 137,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "delegatecall",
                      "nodeType": "MemberAccess",
                      "src": "1747:27:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                        "typeString": "function (bytes memory) returns (bool,bytes memory)"
                      }
                    },
                    "id": 143,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1747:112:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bool,bytes memory)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1703:156:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 146,
                        "name": "success",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 133,
                        "src": "1877:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "64656c656761746543616c6c206661696c6564",
                        "id": 147,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1886:21:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_af6bfea76039a9127475d477f24bd8b309e88aab9bf09d387ff24d6b795aeb1b",
                          "typeString": "literal_string \"delegateCall failed\""
                        },
                        "value": "delegateCall failed"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_af6bfea76039a9127475d477f24bd8b309e88aab9bf09d387ff24d6b795aeb1b",
                          "typeString": "literal_string \"delegateCall failed\""
                        }
                      ],
                      "id": 145,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1869:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 148,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1869:39:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 149,
                  "nodeType": "ExpressionStatement",
                  "src": "1869:39:1"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 153,
                            "name": "returnedData",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 135,
                            "src": "1939:12:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          {
                            "components": [
                              {
                                "id": 155,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "1954:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_uint256_$",
                                  "typeString": "type(uint256)"
                                },
                                "typeName": {
                                  "id": 154,
                                  "name": "uint256",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "1954:7:1",
                                  "typeDescriptions": {}
                                }
                              }
                            ],
                            "id": 156,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "1953:9:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_uint256_$",
                              "typeString": "type(uint256)"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            },
                            {
                              "typeIdentifier": "t_type$_t_uint256_$",
                              "typeString": "type(uint256)"
                            }
                          ],
                          "expression": {
                            "id": 151,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "1928:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 152,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "decode",
                          "nodeType": "MemberAccess",
                          "src": "1928:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
                            "typeString": "function () pure"
                          }
                        },
                        "id": 157,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1928:35:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 150,
                      "name": "Test",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 82,
                      "src": "1923:4:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 158,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1923:41:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 159,
                  "nodeType": "EmitStatement",
                  "src": "1918:46:1"
                }
              ]
            },
            "functionSelector": "9de0514e",
            "id": 161,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "testDelegateCallPricePerShare",
            "nameLocation": "1638:29:1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 130,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 129,
                  "mutability": "mutable",
                  "name": "_vault",
                  "nameLocation": "1676:6:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 161,
                  "src": "1668:14:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 128,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1668:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1667:16:1"
            },
            "returnParameters": {
              "id": 131,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1693:0:1"
            },
            "scope": 162,
            "src": "1629:342:1",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 163,
        "src": "57:1916:1",
        "usedErrors": []
      }
    ],
    "src": "32:2126:1"
  },
  "bytecode": "608060405234801561001057600080fd5b50610344806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806319ab453c1461005c5780635c60da1b146100715780639de0514e146100a0578063aaf10f42146100b3578063c45a0155146100c4575b600080fd5b61006f61006a36600461028a565b6100d7565b005b600154610084906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b61006f6100ae36600461028a565b610161565b6001546001600160a01b0316610084565b600054610084906001600160a01b031681565b600154600160a01b900460ff16156101275760405162461bcd60e51b815260206004820152600e60248201526d1b9bc81cd958dbdb99081a5b9a5d60921b60448201526064015b60405180910390fd5b600080546001600160a01b03191633179055600180546001600160a81b0319166001600160a01b039290921691909117600160a01b179055565b6001546040516001600160a01b038381166024830152600092839291169060440160408051601f198184030181529181526020820180516001600160e01b0316631177d94d60e21b179052516101b791906102ba565b600060405180830381855af49150503d80600081146101f2576040519150601f19603f3d011682016040523d82523d6000602084013e6101f7565b606091505b50915091508161023f5760405162461bcd60e51b815260206004820152601360248201527219195b1959d85d1950d85b1b0819985a5b1959606a1b604482015260640161011e565b7f63a242a632efe33c0e210e04e4173612a17efa4f16aa4890bc7e46caece80de08180602001905181019061027491906102f5565b60405190815260200160405180910390a1505050565b60006020828403121561029c57600080fd5b81356001600160a01b03811681146102b357600080fd5b9392505050565b6000825160005b818110156102db57602081860181015185830152016102c1565b818111156102ea576000828501525b509190910192915050565b60006020828403121561030757600080fd5b505191905056fea26469706673582212204ff28362a773398b7301f9c09e570b90030b97277a78331905084bdf645bab2d64736f6c634300080d0033",
  "bytecodeSha1": "d4bcd767c420afb05ac31fede929355f1a558d91",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.13+commit.abaa5c0e"
  },
  "contractName": "Vault",
  "coverageMap": {
    "branches": {
      "1": {
        "Vault.init": {
          "7": [
            1023,
            1032,
            true
          ]
        },
        "Vault.testDelegateCallPricePerShare": {
          "8": [
            1877,
            1884,
            true
          ]
        }
      }
    },
    "statements": {
      "1": {
        "Vault.getImplementation": {
          "0": [
            1409,
            1430
          ]
        },
        "Vault.init": {
          "1": [
            1015,
            1050
          ],
          "2": [
            1060,
            1080
          ],
          "3": [
            1090,
            1122
          ],
          "4": [
            1132,
            1147
          ]
        },
        "Vault.testDelegateCallPricePerShare": {
          "5": [
            1869,
            1908
          ],
          "6": [
            1918,
            1964
          ]
        }
      }
    }
  },
  "dependencies": [],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100575760003560e01c806319ab453c1461005c5780635c60da1b146100715780639de0514e146100a0578063aaf10f42146100b3578063c45a0155146100c4575b600080fd5b61006f61006a36600461028a565b6100d7565b005b600154610084906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b61006f6100ae36600461028a565b610161565b6001546001600160a01b0316610084565b600054610084906001600160a01b031681565b600154600160a01b900460ff16156101275760405162461bcd60e51b815260206004820152600e60248201526d1b9bc81cd958dbdb99081a5b9a5d60921b60448201526064015b60405180910390fd5b600080546001600160a01b03191633179055600180546001600160a81b0319166001600160a01b039290921691909117600160a01b179055565b6001546040516001600160a01b038381166024830152600092839291169060440160408051601f198184030181529181526020820180516001600160e01b0316631177d94d60e21b179052516101b791906102ba565b600060405180830381855af49150503d80600081146101f2576040519150601f19603f3d011682016040523d82523d6000602084013e6101f7565b606091505b50915091508161023f5760405162461bcd60e51b815260206004820152601360248201527219195b1959d85d1950d85b1b0819985a5b1959606a1b604482015260640161011e565b7f63a242a632efe33c0e210e04e4173612a17efa4f16aa4890bc7e46caece80de08180602001905181019061027491906102f5565b60405190815260200160405180910390a1505050565b60006020828403121561029c57600080fd5b81356001600160a01b03811681146102b357600080fd5b9392505050565b6000825160005b818110156102db57602081860181015185830152016102c1565b818111156102ea576000828501525b509190910192915050565b60006020828403121561030757600080fd5b505191905056fea26469706673582212204ff28362a773398b7301f9c09e570b90030b97277a78331905084bdf645bab2d64736f6c634300080d0033",
  "deployedSourceMap": "57:1916:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;957:197;;;;;;:::i;:::-;;:::i;:::-;;296:29;;;;;-1:-1:-1;;;;;296:29:1;;;;;;-1:-1:-1;;;;;469:32:2;;;451:51;;439:2;424:18;296:29:1;;;;;;;1629:342;;;;;;:::i;:::-;;:::i;1340:97::-;1416:14;;-1:-1:-1;;;;;1416:14:1;1340:97;;268:22;;;;;-1:-1:-1;;;;;268:22:1;;;957:197;1024:8;;-1:-1:-1;;;1024:8:1;;;;1023:9;1015:35;;;;-1:-1:-1;;;1015:35:1;;715:2:2;1015:35:1;;;697:21:2;754:2;734:18;;;727:30;-1:-1:-1;;;773:18:2;;;766:44;827:18;;1015:35:1;;;;;;;;;1060:7;:20;;-1:-1:-1;;;;;;1060:20:1;1070:10;1060:20;;;;1090:32;;-1:-1:-1;;;;;;1132:15:1;-1:-1:-1;;;;;1090:32:1;;;;1132:15;;;;-1:-1:-1;;;1132:15:1;;;957:197::o;1629:342::-;1747:14;;1784:65;;-1:-1:-1;;;;;469:32:2;;;1784:65:1;;;451:51:2;1704:12:1;;;;1747:14;;;424:18:2;;1784:65:1;;;-1:-1:-1;;1784:65:1;;;;;;;;;;;;;;-1:-1:-1;;;;;1784:65:1;-1:-1:-1;;;1784:65:1;;;1747:112;;;1784:65;1747:112;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1703:156;;;;1877:7;1869:39;;;;-1:-1:-1;;;1869:39:1;;1489:2:2;1869:39:1;;;1471:21:2;1528:2;1508:18;;;1501:30;-1:-1:-1;;;1547:18:2;;;1540:49;1606:18;;1869:39:1;1287:343:2;1869:39:1;1923:41;1939:12;1928:35;;;;;;;;;;;;:::i;:::-;1923:41;;1970:25:2;;;1958:2;1943:18;1923:41:1;;;;;;;1693:278;;1629:342;:::o;14:286:2:-;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;168:23;;-1:-1:-1;;;;;220:31:2;;210:42;;200:70;;266:1;263;256:12;200:70;289:5;14:286;-1:-1:-1;;;14:286:2:o;856:426::-;985:3;1023:6;1017:13;1048:1;1058:129;1072:6;1069:1;1066:13;1058:129;;;1170:4;1154:14;;;1150:25;;1144:32;1131:11;;;1124:53;1087:12;1058:129;;;1205:6;1202:1;1199:13;1196:48;;;1240:1;1231:6;1226:3;1222:16;1215:27;1196:48;-1:-1:-1;1260:16:2;;;;;856:426;-1:-1:-1;;856:426:2:o;1635:184::-;1705:6;1758:2;1746:9;1737:7;1733:23;1729:32;1726:52;;;1774:1;1771;1764:12;1726:52;-1:-1:-1;1797:16:2;;1635:184;-1:-1:-1;1635:184:2:o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    57,
    1973
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x57 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x19AB453C EQ PUSH2 0x5C JUMPI DUP1 PUSH4 0x5C60DA1B EQ PUSH2 0x71 JUMPI DUP1 PUSH4 0x9DE0514E EQ PUSH2 0xA0 JUMPI DUP1 PUSH4 0xAAF10F42 EQ PUSH2 0xB3 JUMPI DUP1 PUSH4 0xC45A0155 EQ PUSH2 0xC4 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6F PUSH2 0x6A CALLDATASIZE PUSH1 0x4 PUSH2 0x28A JUMP JUMPDEST PUSH2 0xD7 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x84 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x6F PUSH2 0xAE CALLDATASIZE PUSH1 0x4 PUSH2 0x28A JUMP JUMPDEST PUSH2 0x161 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x84 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x84 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x127 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x1B9BC81CD958DBDB99081A5B9A5D PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR SWAP1 SSTORE PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR PUSH1 0x1 PUSH1 0xA0 SHL OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x0 SWAP3 DUP4 SWAP3 SWAP2 AND SWAP1 PUSH1 0x44 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x1177D94D PUSH1 0xE2 SHL OR SWAP1 MSTORE MLOAD PUSH2 0x1B7 SWAP2 SWAP1 PUSH2 0x2BA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1F2 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1F7 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x23F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x19195B1959D85D1950D85B1B0819985A5B1959 PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x11E JUMP JUMPDEST PUSH32 0x63A242A632EFE33C0E210E04E4173612A17EFA4F16AA4890BC7E46CAECE80DE0 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x274 SWAP2 SWAP1 PUSH2 0x2F5 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x29C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2DB JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD DUP6 DUP4 ADD MSTORE ADD PUSH2 0x2C1 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x2EA JUMPI PUSH1 0x0 DUP3 DUP6 ADD MSTORE JUMPDEST POP SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x307 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4F CALLCODE DUP4 PUSH3 0xA77339 DUP12 PUSH20 0x1F9C09E570B90030B97277A78331905084BDF64 JUMPDEST 0xAB 0x2D PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        57,
        1973
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "5": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "CALLVALUE",
      "path": "1"
    },
    "6": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "DUP1",
      "path": "1"
    },
    "7": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "8": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "12": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "DUP1",
      "path": "1"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "REVERT",
      "path": "1"
    },
    "16": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "17": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "POP",
      "path": "1"
    },
    "18": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "21": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "LT",
      "path": "1"
    },
    "22": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x57"
    },
    "25": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "26": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "CALLDATALOAD",
      "path": "1"
    },
    "29": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "SHR",
      "path": "1"
    },
    "32": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "DUP1",
      "path": "1"
    },
    "33": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x19AB453C"
    },
    "38": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "EQ",
      "path": "1"
    },
    "39": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x5C"
    },
    "42": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "43": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "DUP1",
      "path": "1"
    },
    "44": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x5C60DA1B"
    },
    "49": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "EQ",
      "path": "1"
    },
    "50": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x71"
    },
    "53": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "54": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "DUP1",
      "path": "1"
    },
    "55": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x9DE0514E"
    },
    "60": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "EQ",
      "path": "1"
    },
    "61": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xA0"
    },
    "64": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "65": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "DUP1",
      "path": "1"
    },
    "66": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xAAF10F42"
    },
    "71": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "EQ",
      "path": "1"
    },
    "72": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xB3"
    },
    "75": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "76": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "DUP1",
      "path": "1"
    },
    "77": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xC45A0155"
    },
    "82": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "EQ",
      "path": "1"
    },
    "83": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xC4"
    },
    "86": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "87": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "88": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "90": {
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "DUP1",
      "path": "1"
    },
    "91": {
      "first_revert": true,
      "fn": null,
      "offset": [
        57,
        1973
      ],
      "op": "REVERT",
      "path": "1"
    },
    "92": {
      "fn": "Vault.init",
      "offset": [
        957,
        1154
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "93": {
      "fn": "Vault.init",
      "offset": [
        957,
        1154
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x6F"
    },
    "96": {
      "fn": "Vault.init",
      "offset": [
        957,
        1154
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x6A"
    },
    "99": {
      "fn": "Vault.init",
      "offset": [
        957,
        1154
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "100": {
      "fn": "Vault.init",
      "offset": [
        957,
        1154
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "102": {
      "fn": "Vault.init",
      "offset": [
        957,
        1154
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x28A"
    },
    "105": {
      "fn": "Vault.init",
      "jump": "i",
      "offset": [
        957,
        1154
      ],
      "op": "JUMP",
      "path": "1"
    },
    "106": {
      "fn": "Vault.init",
      "offset": [
        957,
        1154
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "107": {
      "fn": "Vault.init",
      "offset": [
        957,
        1154
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xD7"
    },
    "110": {
      "fn": "Vault.init",
      "jump": "i",
      "offset": [
        957,
        1154
      ],
      "op": "JUMP",
      "path": "1"
    },
    "111": {
      "fn": "Vault.init",
      "offset": [
        957,
        1154
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "112": {
      "fn": "Vault.init",
      "offset": [
        957,
        1154
      ],
      "op": "STOP",
      "path": "1"
    },
    "113": {
      "offset": [
        296,
        325
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "114": {
      "fn": "Vault.init",
      "offset": [
        296,
        325
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "116": {
      "fn": "Vault.init",
      "offset": [
        296,
        325
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "117": {
      "fn": "Vault.init",
      "offset": [
        296,
        325
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x84"
    },
    "120": {
      "fn": "Vault.init",
      "offset": [
        296,
        325
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "121": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "123": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "125": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "127": {
      "op": "SHL"
    },
    "128": {
      "op": "SUB"
    },
    "129": {
      "offset": [
        296,
        325
      ],
      "op": "AND",
      "path": "1"
    },
    "130": {
      "fn": "Vault.init",
      "offset": [
        296,
        325
      ],
      "op": "DUP2",
      "path": "1"
    },
    "131": {
      "fn": "Vault.init",
      "offset": [
        296,
        325
      ],
      "op": "JUMP",
      "path": "1"
    },
    "132": {
      "fn": "Vault.init",
      "offset": [
        296,
        325
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "133": {
      "fn": "Vault.init",
      "offset": [
        296,
        325
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "135": {
      "fn": "Vault.init",
      "offset": [
        296,
        325
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "136": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "138": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "140": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "142": {
      "op": "SHL"
    },
    "143": {
      "op": "SUB"
    },
    "144": {
      "op": "SWAP1"
    },
    "145": {
      "op": "SWAP2"
    },
    "146": {
      "op": "AND"
    },
    "147": {
      "op": "DUP2"
    },
    "148": {
      "op": "MSTORE"
    },
    "149": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "151": {
      "op": "ADD"
    },
    "152": {
      "offset": [
        296,
        325
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "154": {
      "fn": "Vault.init",
      "offset": [
        296,
        325
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "155": {
      "fn": "Vault.init",
      "offset": [
        296,
        325
      ],
      "op": "DUP1",
      "path": "1"
    },
    "156": {
      "fn": "Vault.init",
      "offset": [
        296,
        325
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "157": {
      "fn": "Vault.init",
      "offset": [
        296,
        325
      ],
      "op": "SUB",
      "path": "1"
    },
    "158": {
      "fn": "Vault.init",
      "offset": [
        296,
        325
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "159": {
      "fn": "Vault.init",
      "offset": [
        296,
        325
      ],
      "op": "RETURN",
      "path": "1"
    },
    "160": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1629,
        1971
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "161": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1629,
        1971
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x6F"
    },
    "164": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1629,
        1971
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xAE"
    },
    "167": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1629,
        1971
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "168": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1629,
        1971
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "170": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1629,
        1971
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x28A"
    },
    "173": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "jump": "i",
      "offset": [
        1629,
        1971
      ],
      "op": "JUMP",
      "path": "1"
    },
    "174": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1629,
        1971
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "175": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1629,
        1971
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x161"
    },
    "178": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "jump": "i",
      "offset": [
        1629,
        1971
      ],
      "op": "JUMP",
      "path": "1"
    },
    "179": {
      "fn": "Vault.getImplementation",
      "offset": [
        1340,
        1437
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "180": {
      "fn": "Vault.getImplementation",
      "offset": [
        1416,
        1430
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 0,
      "value": "0x1"
    },
    "182": {
      "fn": "Vault.getImplementation",
      "offset": [
        1416,
        1430
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "183": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "185": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "187": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "189": {
      "op": "SHL"
    },
    "190": {
      "op": "SUB"
    },
    "191": {
      "fn": "Vault.getImplementation",
      "offset": [
        1416,
        1430
      ],
      "op": "AND",
      "path": "1"
    },
    "192": {
      "fn": "Vault.getImplementation",
      "offset": [
        1340,
        1437
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x84"
    },
    "195": {
      "fn": "Vault.getImplementation",
      "offset": [
        1340,
        1437
      ],
      "op": "JUMP",
      "path": "1"
    },
    "196": {
      "offset": [
        268,
        290
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "197": {
      "fn": "Vault.getImplementation",
      "offset": [
        268,
        290
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "199": {
      "fn": "Vault.getImplementation",
      "offset": [
        268,
        290
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "200": {
      "fn": "Vault.getImplementation",
      "offset": [
        268,
        290
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x84"
    },
    "203": {
      "fn": "Vault.getImplementation",
      "offset": [
        268,
        290
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "204": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "206": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "208": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "210": {
      "op": "SHL"
    },
    "211": {
      "op": "SUB"
    },
    "212": {
      "offset": [
        268,
        290
      ],
      "op": "AND",
      "path": "1"
    },
    "213": {
      "fn": "Vault.getImplementation",
      "offset": [
        268,
        290
      ],
      "op": "DUP2",
      "path": "1"
    },
    "214": {
      "fn": "Vault.getImplementation",
      "offset": [
        268,
        290
      ],
      "op": "JUMP",
      "path": "1"
    },
    "215": {
      "fn": "Vault.init",
      "offset": [
        957,
        1154
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "216": {
      "fn": "Vault.init",
      "offset": [
        1024,
        1032
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 1,
      "value": "0x1"
    },
    "218": {
      "fn": "Vault.init",
      "offset": [
        1024,
        1032
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "219": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "221": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "223": {
      "op": "SHL"
    },
    "224": {
      "fn": "Vault.init",
      "offset": [
        1024,
        1032
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "225": {
      "fn": "Vault.init",
      "offset": [
        1024,
        1032
      ],
      "op": "DIV",
      "path": "1"
    },
    "226": {
      "fn": "Vault.init",
      "offset": [
        1024,
        1032
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xFF"
    },
    "228": {
      "fn": "Vault.init",
      "offset": [
        1024,
        1032
      ],
      "op": "AND",
      "path": "1"
    },
    "229": {
      "branch": 7,
      "fn": "Vault.init",
      "offset": [
        1023,
        1032
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "230": {
      "fn": "Vault.init",
      "offset": [
        1015,
        1050
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x127"
    },
    "233": {
      "branch": 7,
      "fn": "Vault.init",
      "offset": [
        1015,
        1050
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "234": {
      "fn": "Vault.init",
      "offset": [
        1015,
        1050
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "236": {
      "fn": "Vault.init",
      "offset": [
        1015,
        1050
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "237": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "241": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "243": {
      "op": "SHL"
    },
    "244": {
      "fn": "Vault.init",
      "offset": [
        1015,
        1050
      ],
      "op": "DUP2",
      "path": "1"
    },
    "245": {
      "fn": "Vault.init",
      "offset": [
        1015,
        1050
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "246": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "248": {
      "fn": "Vault.init",
      "offset": [
        1015,
        1050
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "250": {
      "fn": "Vault.init",
      "offset": [
        1015,
        1050
      ],
      "op": "DUP3",
      "path": "1"
    },
    "251": {
      "fn": "Vault.init",
      "offset": [
        1015,
        1050
      ],
      "op": "ADD",
      "path": "1"
    },
    "252": {
      "op": "MSTORE"
    },
    "253": {
      "op": "PUSH1",
      "value": "0xE"
    },
    "255": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "257": {
      "op": "DUP3"
    },
    "258": {
      "op": "ADD"
    },
    "259": {
      "op": "MSTORE"
    },
    "260": {
      "op": "PUSH14",
      "value": "0x1B9BC81CD958DBDB99081A5B9A5D"
    },
    "275": {
      "op": "PUSH1",
      "value": "0x92"
    },
    "277": {
      "op": "SHL"
    },
    "278": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "280": {
      "op": "DUP3"
    },
    "281": {
      "op": "ADD"
    },
    "282": {
      "op": "MSTORE"
    },
    "283": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "285": {
      "op": "ADD"
    },
    "286": {
      "fn": "Vault.init",
      "offset": [
        1015,
        1050
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "287": {
      "fn": "Vault.init",
      "offset": [
        1015,
        1050
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "289": {
      "fn": "Vault.init",
      "offset": [
        1015,
        1050
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "290": {
      "fn": "Vault.init",
      "offset": [
        1015,
        1050
      ],
      "op": "DUP1",
      "path": "1"
    },
    "291": {
      "fn": "Vault.init",
      "offset": [
        1015,
        1050
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "292": {
      "fn": "Vault.init",
      "offset": [
        1015,
        1050
      ],
      "op": "SUB",
      "path": "1"
    },
    "293": {
      "fn": "Vault.init",
      "offset": [
        1015,
        1050
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "294": {
      "fn": "Vault.init",
      "offset": [
        1015,
        1050
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "1"
    },
    "295": {
      "fn": "Vault.init",
      "offset": [
        1015,
        1050
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "296": {
      "fn": "Vault.init",
      "offset": [
        1060,
        1067
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 2,
      "value": "0x0"
    },
    "298": {
      "fn": "Vault.init",
      "offset": [
        1060,
        1080
      ],
      "op": "DUP1",
      "path": "1"
    },
    "299": {
      "fn": "Vault.init",
      "offset": [
        1060,
        1080
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "300": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "302": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "304": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "306": {
      "op": "SHL"
    },
    "307": {
      "op": "SUB"
    },
    "308": {
      "op": "NOT"
    },
    "309": {
      "fn": "Vault.init",
      "offset": [
        1060,
        1080
      ],
      "op": "AND",
      "path": "1"
    },
    "310": {
      "fn": "Vault.init",
      "offset": [
        1070,
        1080
      ],
      "op": "CALLER",
      "path": "1"
    },
    "311": {
      "fn": "Vault.init",
      "offset": [
        1060,
        1080
      ],
      "op": "OR",
      "path": "1"
    },
    "312": {
      "fn": "Vault.init",
      "offset": [
        1060,
        1080
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "313": {
      "fn": "Vault.init",
      "offset": [
        1060,
        1080
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "314": {
      "fn": "Vault.init",
      "offset": [
        1060,
        1080
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "316": {
      "fn": "Vault.init",
      "offset": [
        1090,
        1122
      ],
      "op": "DUP1",
      "path": "1",
      "statement": 3
    },
    "317": {
      "fn": "Vault.init",
      "offset": [
        1090,
        1122
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "318": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "320": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "322": {
      "op": "PUSH1",
      "value": "0xA8"
    },
    "324": {
      "op": "SHL"
    },
    "325": {
      "op": "SUB"
    },
    "326": {
      "op": "NOT"
    },
    "327": {
      "fn": "Vault.init",
      "offset": [
        1132,
        1147
      ],
      "op": "AND",
      "path": "1",
      "statement": 4
    },
    "328": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "330": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "332": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "334": {
      "op": "SHL"
    },
    "335": {
      "op": "SUB"
    },
    "336": {
      "fn": "Vault.init",
      "offset": [
        1090,
        1122
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "337": {
      "fn": "Vault.init",
      "offset": [
        1090,
        1122
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "338": {
      "fn": "Vault.init",
      "offset": [
        1090,
        1122
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "339": {
      "fn": "Vault.init",
      "offset": [
        1090,
        1122
      ],
      "op": "AND",
      "path": "1"
    },
    "340": {
      "fn": "Vault.init",
      "offset": [
        1132,
        1147
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "341": {
      "fn": "Vault.init",
      "offset": [
        1132,
        1147
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "342": {
      "fn": "Vault.init",
      "offset": [
        1132,
        1147
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "343": {
      "fn": "Vault.init",
      "offset": [
        1132,
        1147
      ],
      "op": "OR",
      "path": "1"
    },
    "344": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "346": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "348": {
      "op": "SHL"
    },
    "349": {
      "fn": "Vault.init",
      "offset": [
        1132,
        1147
      ],
      "op": "OR",
      "path": "1"
    },
    "350": {
      "fn": "Vault.init",
      "offset": [
        1132,
        1147
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "351": {
      "fn": "Vault.init",
      "offset": [
        1132,
        1147
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "352": {
      "fn": "Vault.init",
      "jump": "o",
      "offset": [
        957,
        1154
      ],
      "op": "JUMP",
      "path": "1"
    },
    "353": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1629,
        1971
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "354": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1761
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "356": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1761
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "357": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1784,
        1849
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "359": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1784,
        1849
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "360": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "362": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "364": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "366": {
      "op": "SHL"
    },
    "367": {
      "op": "SUB"
    },
    "368": {
      "op": "DUP4"
    },
    "369": {
      "op": "DUP2"
    },
    "370": {
      "op": "AND"
    },
    "371": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1784,
        1849
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x24"
    },
    "373": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1784,
        1849
      ],
      "op": "DUP4",
      "path": "1"
    },
    "374": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1784,
        1849
      ],
      "op": "ADD",
      "path": "1"
    },
    "375": {
      "op": "MSTORE"
    },
    "376": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1704,
        1716
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "378": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1704,
        1716
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "379": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1704,
        1716
      ],
      "op": "DUP4",
      "path": "1"
    },
    "380": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1704,
        1716
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "381": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1761
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "382": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1761
      ],
      "op": "AND",
      "path": "1"
    },
    "383": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1761
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "384": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "386": {
      "op": "ADD"
    },
    "387": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1784,
        1849
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "389": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1784,
        1849
      ],
      "op": "DUP1",
      "path": "1"
    },
    "390": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1784,
        1849
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "391": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "393": {
      "op": "NOT"
    },
    "394": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1784,
        1849
      ],
      "op": "DUP2",
      "path": "1"
    },
    "395": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1784,
        1849
      ],
      "op": "DUP5",
      "path": "1"
    },
    "396": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1784,
        1849
      ],
      "op": "SUB",
      "path": "1"
    },
    "397": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1784,
        1849
      ],
      "op": "ADD",
      "path": "1"
    },
    "398": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1784,
        1849
      ],
      "op": "DUP2",
      "path": "1"
    },
    "399": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1784,
        1849
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "400": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1784,
        1849
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "401": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1784,
        1849
      ],
      "op": "DUP2",
      "path": "1"
    },
    "402": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1784,
        1849
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "403": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1784,
        1849
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "405": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1784,
        1849
      ],
      "op": "DUP3",
      "path": "1"
    },
    "406": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1784,
        1849
      ],
      "op": "ADD",
      "path": "1"
    },
    "407": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1784,
        1849
      ],
      "op": "DUP1",
      "path": "1"
    },
    "408": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1784,
        1849
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "409": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "411": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "413": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "415": {
      "op": "SHL"
    },
    "416": {
      "op": "SUB"
    },
    "417": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1784,
        1849
      ],
      "op": "AND",
      "path": "1"
    },
    "418": {
      "op": "PUSH4",
      "value": "0x1177D94D"
    },
    "423": {
      "op": "PUSH1",
      "value": "0xE2"
    },
    "425": {
      "op": "SHL"
    },
    "426": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1784,
        1849
      ],
      "op": "OR",
      "path": "1"
    },
    "427": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1784,
        1849
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "428": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1784,
        1849
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "429": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "430": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1B7"
    },
    "433": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "434": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1784,
        1849
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "435": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2BA"
    },
    "438": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "jump": "i",
      "offset": [
        1747,
        1859
      ],
      "op": "JUMP",
      "path": "1"
    },
    "439": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "440": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "442": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "444": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "445": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "DUP1",
      "path": "1"
    },
    "446": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "DUP4",
      "path": "1"
    },
    "447": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "SUB",
      "path": "1"
    },
    "448": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "DUP2",
      "path": "1"
    },
    "449": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "DUP6",
      "path": "1"
    },
    "450": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "GAS",
      "path": "1"
    },
    "451": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "DELEGATECALL",
      "path": "1"
    },
    "452": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "453": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "POP",
      "path": "1"
    },
    "454": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "POP",
      "path": "1"
    },
    "455": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "456": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "DUP1",
      "path": "1"
    },
    "457": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "459": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "DUP2",
      "path": "1"
    },
    "460": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "EQ",
      "path": "1"
    },
    "461": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1F2"
    },
    "464": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "465": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "467": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "468": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "469": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "POP",
      "path": "1"
    },
    "470": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "472": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "NOT",
      "path": "1"
    },
    "473": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x3F"
    },
    "475": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "476": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "ADD",
      "path": "1"
    },
    "477": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "AND",
      "path": "1"
    },
    "478": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "DUP3",
      "path": "1"
    },
    "479": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "ADD",
      "path": "1"
    },
    "480": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "482": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "483": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "484": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "DUP3",
      "path": "1"
    },
    "485": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "486": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "487": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "489": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "491": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "DUP5",
      "path": "1"
    },
    "492": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "ADD",
      "path": "1"
    },
    "493": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "RETURNDATACOPY",
      "path": "1"
    },
    "494": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1F7"
    },
    "497": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "JUMP",
      "path": "1"
    },
    "498": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "499": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x60"
    },
    "501": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "502": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "POP",
      "path": "1"
    },
    "503": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "504": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1747,
        1859
      ],
      "op": "POP",
      "path": "1"
    },
    "505": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1703,
        1859
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "506": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1703,
        1859
      ],
      "op": "POP",
      "path": "1"
    },
    "507": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1703,
        1859
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "508": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1703,
        1859
      ],
      "op": "POP",
      "path": "1"
    },
    "509": {
      "branch": 8,
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1877,
        1884
      ],
      "op": "DUP2",
      "path": "1",
      "statement": 5
    },
    "510": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1869,
        1908
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x23F"
    },
    "513": {
      "branch": 8,
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1869,
        1908
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "514": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1869,
        1908
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "516": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1869,
        1908
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "517": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "521": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "523": {
      "op": "SHL"
    },
    "524": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1869,
        1908
      ],
      "op": "DUP2",
      "path": "1"
    },
    "525": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1869,
        1908
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "526": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "528": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1869,
        1908
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "530": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1869,
        1908
      ],
      "op": "DUP3",
      "path": "1"
    },
    "531": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1869,
        1908
      ],
      "op": "ADD",
      "path": "1"
    },
    "532": {
      "op": "MSTORE"
    },
    "533": {
      "op": "PUSH1",
      "value": "0x13"
    },
    "535": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "537": {
      "op": "DUP3"
    },
    "538": {
      "op": "ADD"
    },
    "539": {
      "op": "MSTORE"
    },
    "540": {
      "op": "PUSH19",
      "value": "0x19195B1959D85D1950D85B1B0819985A5B1959"
    },
    "560": {
      "op": "PUSH1",
      "value": "0x6A"
    },
    "562": {
      "op": "SHL"
    },
    "563": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "565": {
      "op": "DUP3"
    },
    "566": {
      "op": "ADD"
    },
    "567": {
      "op": "MSTORE"
    },
    "568": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "570": {
      "op": "ADD"
    },
    "571": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1869,
        1908
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x11E"
    },
    "574": {
      "op": "JUMP"
    },
    "575": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1869,
        1908
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "576": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1923,
        1964
      ],
      "op": "PUSH32",
      "path": "1",
      "statement": 6,
      "value": "0x63A242A632EFE33C0E210E04E4173612A17EFA4F16AA4890BC7E46CAECE80DE0"
    },
    "609": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1939,
        1951
      ],
      "op": "DUP2",
      "path": "1"
    },
    "610": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1928,
        1963
      ],
      "op": "DUP1",
      "path": "1"
    },
    "611": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1928,
        1963
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "613": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1928,
        1963
      ],
      "op": "ADD",
      "path": "1"
    },
    "614": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1928,
        1963
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "615": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1928,
        1963
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "616": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1928,
        1963
      ],
      "op": "DUP2",
      "path": "1"
    },
    "617": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1928,
        1963
      ],
      "op": "ADD",
      "path": "1"
    },
    "618": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1928,
        1963
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "619": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1928,
        1963
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x274"
    },
    "622": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1928,
        1963
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "623": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1928,
        1963
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "624": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1928,
        1963
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x2F5"
    },
    "627": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "jump": "i",
      "offset": [
        1928,
        1963
      ],
      "op": "JUMP",
      "path": "1"
    },
    "628": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1928,
        1963
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "629": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1923,
        1964
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "631": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1923,
        1964
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "632": {
      "op": "SWAP1"
    },
    "633": {
      "op": "DUP2"
    },
    "634": {
      "op": "MSTORE"
    },
    "635": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "637": {
      "op": "ADD"
    },
    "638": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1923,
        1964
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "640": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1923,
        1964
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "641": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1923,
        1964
      ],
      "op": "DUP1",
      "path": "1"
    },
    "642": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1923,
        1964
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "643": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1923,
        1964
      ],
      "op": "SUB",
      "path": "1"
    },
    "644": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1923,
        1964
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "645": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1923,
        1964
      ],
      "op": "LOG1",
      "path": "1"
    },
    "646": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1693,
        1971
      ],
      "op": "POP",
      "path": "1"
    },
    "647": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1693,
        1971
      ],
      "op": "POP",
      "path": "1"
    },
    "648": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "offset": [
        1629,
        1971
      ],
      "op": "POP",
      "path": "1"
    },
    "649": {
      "fn": "Vault.testDelegateCallPricePerShare",
      "jump": "o",
      "offset": [
        1629,
        1971
      ],
      "op": "JUMP",
      "path": "1"
    },
    "650": {
      "op": "JUMPDEST"
    },
    "651": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "653": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "655": {
      "op": "DUP3"
    },
    "656": {
      "op": "DUP5"
    },
    "657": {
      "op": "SUB"
    },
    "658": {
      "op": "SLT"
    },
    "659": {
      "op": "ISZERO"
    },
    "660": {
      "op": "PUSH2",
      "value": "0x29C"
    },
    "663": {
      "op": "JUMPI"
    },
    "664": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "666": {
      "op": "DUP1"
    },
    "667": {
      "op": "REVERT"
    },
    "668": {
      "op": "JUMPDEST"
    },
    "669": {
      "op": "DUP2"
    },
    "670": {
      "op": "CALLDATALOAD"
    },
    "671": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "673": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "675": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "677": {
      "op": "SHL"
    },
    "678": {
      "op": "SUB"
    },
    "679": {
      "op": "DUP2"
    },
    "680": {
      "op": "AND"
    },
    "681": {
      "op": "DUP2"
    },
    "682": {
      "op": "EQ"
    },
    "683": {
      "op": "PUSH2",
      "value": "0x2B3"
    },
    "686": {
      "op": "JUMPI"
    },
    "687": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "689": {
      "op": "DUP1"
    },
    "690": {
      "op": "REVERT"
    },
    "691": {
      "op": "JUMPDEST"
    },
    "692": {
      "op": "SWAP4"
    },
    "693": {
      "op": "SWAP3"
    },
    "694": {
      "op": "POP"
    },
    "695": {
      "op": "POP"
    },
    "696": {
      "op": "POP"
    },
    "697": {
      "jump": "o",
      "op": "JUMP"
    },
    "698": {
      "op": "JUMPDEST"
    },
    "699": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "701": {
      "op": "DUP3"
    },
    "702": {
      "op": "MLOAD"
    },
    "703": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "705": {
      "op": "JUMPDEST"
    },
    "706": {
      "op": "DUP2"
    },
    "707": {
      "op": "DUP2"
    },
    "708": {
      "op": "LT"
    },
    "709": {
      "op": "ISZERO"
    },
    "710": {
      "op": "PUSH2",
      "value": "0x2DB"
    },
    "713": {
      "op": "JUMPI"
    },
    "714": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "716": {
      "op": "DUP2"
    },
    "717": {
      "op": "DUP7"
    },
    "718": {
      "op": "ADD"
    },
    "719": {
      "op": "DUP2"
    },
    "720": {
      "op": "ADD"
    },
    "721": {
      "op": "MLOAD"
    },
    "722": {
      "op": "DUP6"
    },
    "723": {
      "op": "DUP4"
    },
    "724": {
      "op": "ADD"
    },
    "725": {
      "op": "MSTORE"
    },
    "726": {
      "op": "ADD"
    },
    "727": {
      "op": "PUSH2",
      "value": "0x2C1"
    },
    "730": {
      "op": "JUMP"
    },
    "731": {
      "op": "JUMPDEST"
    },
    "732": {
      "op": "DUP2"
    },
    "733": {
      "op": "DUP2"
    },
    "734": {
      "op": "GT"
    },
    "735": {
      "op": "ISZERO"
    },
    "736": {
      "op": "PUSH2",
      "value": "0x2EA"
    },
    "739": {
      "op": "JUMPI"
    },
    "740": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "742": {
      "op": "DUP3"
    },
    "743": {
      "op": "DUP6"
    },
    "744": {
      "op": "ADD"
    },
    "745": {
      "op": "MSTORE"
    },
    "746": {
      "op": "JUMPDEST"
    },
    "747": {
      "op": "POP"
    },
    "748": {
      "op": "SWAP2"
    },
    "749": {
      "op": "SWAP1"
    },
    "750": {
      "op": "SWAP2"
    },
    "751": {
      "op": "ADD"
    },
    "752": {
      "op": "SWAP3"
    },
    "753": {
      "op": "SWAP2"
    },
    "754": {
      "op": "POP"
    },
    "755": {
      "op": "POP"
    },
    "756": {
      "jump": "o",
      "op": "JUMP"
    },
    "757": {
      "op": "JUMPDEST"
    },
    "758": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "760": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "762": {
      "op": "DUP3"
    },
    "763": {
      "op": "DUP5"
    },
    "764": {
      "op": "SUB"
    },
    "765": {
      "op": "SLT"
    },
    "766": {
      "op": "ISZERO"
    },
    "767": {
      "op": "PUSH2",
      "value": "0x307"
    },
    "770": {
      "op": "JUMPI"
    },
    "771": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "773": {
      "op": "DUP1"
    },
    "774": {
      "op": "REVERT"
    },
    "775": {
      "op": "JUMPDEST"
    },
    "776": {
      "op": "POP"
    },
    "777": {
      "op": "MLOAD"
    },
    "778": {
      "op": "SWAP2"
    },
    "779": {
      "op": "SWAP1"
    },
    "780": {
      "op": "POP"
    },
    "781": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "47ad65fb4aee19348f5bd804bcb3fc451737e66b",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract Vault {\n\n    /*//////////////////////////////////////////////////////////////\n                               VARIABLES & EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    address public factory;\n    address public implementation;\n    bool private isInited;\n\n    event implementationIsSet(address);\n    event AddedValuesByDelegateCall(address vault, bool success);\n    event Test(uint256 test);\n\n\n    /*//////////////////////////////////////////////////////////////\n                               MODIFIERS\n    //////////////////////////////////////////////////////////////*/\n\n\n    modifier onlyFactory() {\n        require(msg.sender == factory, \"onlyFactory()\");\n        _;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               INIT\n    //////////////////////////////////////////////////////////////*/\n\n    function init(address _implementation) external {\n        require(!isInited,\"no second init\");\n        factory = msg.sender;\n        implementation = _implementation;\n        isInited = true;\n    }\n\n\n    /*//////////////////////////////////////////////////////////////\n                               READS\n    //////////////////////////////////////////////////////////////*/\n\n\n\n\n    function getImplementation() external view returns(address){\n        return implementation;\n    }\n\n\n    /*//////////////////////////////////////////////////////////////\n                               WRITES\n    //////////////////////////////////////////////////////////////*/\n    \n\n\n\n\n    function testDelegateCallPricePerShare(address _vault) external {\n        (bool success, bytes memory returnedData) = implementation.delegatecall(\n        abi.encodeWithSignature(\"getYearnPricePerShare(address)\", _vault)\n        );\n        require(success, \"delegateCall failed\");\n        emit Test(abi.decode(returnedData, (uint256)));\n    }\n}\n\n    /*//////////////////////////////////////////////////////////////\n                               INTERNALS\n    //////////////////////////////////////////////////////////////*/\n    ",
  "sourceMap": "57:1916:1:-:0;;;;;;;;;;;;;;;;;;;",
  "sourcePath": "contracts/Vault.sol",
  "type": "contract"
}